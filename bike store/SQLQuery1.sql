 /*Task 1: Create Relationships        Define Foreign Key Relationships:
  Link products to brands and categories.
  Link order_items to products.
  Link stocks to products and stores.
  Link staffs to stores and staffs (for manager_id).*/

		SELECT * FROM brands

		ALTER TABLE brands
		ADD PRIMARY KEY (brand_id)

		SELECT * FROM categories

		ALTER TABLE categories
		ADD PRIMARY KEY (category_id)

		SELECT * FROM customers

		ALTER TABLE customers
		ADD PRIMARY KEY (customer_id)

		SELECT * FROM products

		ALTER TABLE products
		ADD PRIMARY KEY (product_id)

		SELECT * FROM staffs	

		ALTER TABLE staffs
		ADD PRIMARY KEY (staff_id)

		SELECT * FROM stores

		ALTER TABLE stores
		ADD PRIMARY KEY (store_id)

--Link products to brands and categories.

		SELECT * FROM products
		SELECT * FROM brands

		ALTER TABLE products
		ADD CONSTRAINT FK_productsBrands
		FOREIGN KEY (brand_id) REFERENCES brands(brand_id)

		SELECT * FROM products
		SELECT * FROM categories

		ALTER TABLE products 
		ADD CONSTRAINT FK_ProductsCatefories
		FOREIGN KEY (category_id) REFERENCES categories(category_id)

--Link order_items to products.

		SELECT * FROM order_items
		SELECT * FROM products

		ALTER TABLE order_items
		ADD CONSTRAINT FK_OrderProducts
		FOREIGN KEY (product_id) REFERENCES products(product_id)

--Link stocks to products and stores.

		SELECT * FROM stocks
		SELECT * FROM stores

		ALTER TABLE stores 
		ADD CONSTRAINT FK_storesStocks
		FOREIGN KEY (store_id) REFERENCES stocks(store_id)

		SELECT * FROM products
		SELECT * FROM stores


		ALTER TABLE stores
		ADD CONSTRAINT FK_StoresProducts
		FOREIGN KEY (store_id) REFERENCES products(product_id)

--Link staffs to stores and staffs (for manager_id)

		SELECT * FROM staffs
		SELECT * FROM stores

		ALTER TABLE staffs
		ADD CONSTRAINT FK_StaffsStores
		FOREIGN KEY (staff_id) REFERENCES stores(store_id)


/*Task 2: Basic Queries

Retrieve Basic Information:
All products under a specific category.
All orders made by a specific customer.*/

--All products under a specific category.

		SELECT  P.product_id,product_name, C.category_id,category_name FROM products P
		LEFT JOIN categories C
		ON P.category_id = C.category_id
		
		  --All orders made by a specific customer.


         SELECT  c.customer_id, 
         CONCAT(c.first_name, ' ', c.last_name) AS customer_name, 
         p.product_id,
         p.product_name,oi.quantity,oi.list_price
		 FROM order_items oi
		 LEFT JOIN products p
		 ON oi.product_id = p.product_id
		 LEFT JOIN customers c
		 ON c.customer_id = oi.order_id

/*	 Task 3: Complex Queries

Analyze Data:
List the top 5 products with the highest sales.
Calculate the total revenue generated by each store.
*/

--List the top 5 products with the highest sales.
     	 
		SELECT  TOP 5 P.product_name ,oi.quantity,SUM(oi.quantity * oi.list_price) AS Total_price FROM products p
		LEFT JOIN order_items oi
		ON p.product_id = oi.product_id
		GROUP BY P.product_name,OI.list_price,oi.quantity
		ORDER BY OI.list_price DESC

--Calculate the total revenue generated by each store.  ' ME KONTROOLLU EDHE NIHER'


	SELECT s.store_name,CAST (SUM(sc.quantity * oi.list_price ) AS money) AS total_price FROM stores s
	LEFT JOIN stocks sc
	ON s.store_id = sc.store_id
	LEFT JOIN order_items oi
	ON sc.product_id = oi.product_id
	GROUP BY s.store_name

	SELECT 
    s.store_name,
    SUM(sc.quantity) AS total_quantity,
    CAST(SUM(sc.quantity * oi.list_price) AS money) AS total_price
	FROM 
    stores s
	LEFT JOIN 
    stocks sc ON s.store_id = sc.store_id
	LEFT JOIN 
    order_items oi ON sc.product_id = oi.product_id
	GROUP BY 
    s.store_name



/*Task 4: Data Aggregation and Reporting

    Generate Reports:
        Total number of products sold in each category.
        Total revenue generated by each brand.
		*/

--Total number of products sold in each category.

	SELECT category_name,SUM(OI.quantity) AS total_sales FROM products P	
	LEFT JOIN categories C
	ON P.category_id = C.category_id
	LEFT JOIN order_items OI
	ON P.product_id = OI.product_id
	GROUP BY category_name
	ORDER BY total_sales DESC


-- Total revenue generated by each brand.


	SELECT B.brand_name,CAST(SUM(oi.quantity*OI.list_price) AS money) AS total_revenue FROM brands B
	LEFT JOIN order_items OI
	ON B.brand_id = OI.order_id
	GROUP BY B.brand_name
	ORDER  BY total_revenue DESC

/*Task 5: Stored Procedures

    Create Stored Procedures:
        Update the quantity of a product in stock.
        Retrieve customer details along with their total orders.
*/			

--Update the quantity of a product in stock.

	CREATE PROCEDURE Upquantaty
	@store_id INT,
	@product_id INT,
	@quantity INT
	AS
	BEGIN
	UPDATE stocks
	SET quantity = @quantity
	WHERE store_id = @store_id 
	AND product_id = @product_id
	END

	SELECT * FROM stocks

	EXEC Upquantaty  @store_id = 1,@product_id =2 , @quantity = 10
	
	EXEC Upquantaty 1,2,5


--  Retrieve customer details along with their total orders.

	SELECT * FROM customers
	SELECT * FROM order_items
	SELECT * FROM products

	--first 
	SELECT c.first_name,c.last_name,p.product_name,COUNT(oi.quantity) AS total_order FROM customers C
	LEFT JOIN order_items OI
	ON C.customer_id = OI.order_id
	LEFT JOIN products P
	ON OI.product_id = P.product_id
	GROUP BY  c.first_name,c.last_name,p.product_name
	ORDER BY total_order DESC

	CREATE PROCEDURE find_order 
	@first_name VARCHAR (100),
	@last_name VARCHAR (100)
	AS
	BEGIN 
	SELECT c.first_name,c.last_name,p.product_name,COUNT(oi.quantity) AS total_order FROM customers C
	LEFT JOIN order_items OI
	ON C.customer_id = OI.order_id
	LEFT JOIN products P
	ON OI.product_id = P.product_id
	WHERE first_name = @first_name AND last_name =	@last_name
	GROUP BY  c.first_name,c.last_name,p.product_name
	ORDER BY total_order DESC
	END

	EXEC find_order 'Justina','Jenkins'

--Second
	SELECT c.first_name,c.last_name,COUNT(oi.quantity) AS total_order FROM customers C
	LEFT JOIN order_items OI
	ON C.customer_id = OI.order_id
	LEFT JOIN products P
	ON OI.product_id = P.product_id
	GROUP BY  c.first_name,c.last_name
	ORDER BY total_order DESC


	
	CREATE PROCEDURE find_order2 
	@first_name VARCHAR (100),
	@last_name VARCHAR (100)
	AS
	BEGIN 
	SELECT c.first_name,c.last_name,COUNT(oi.quantity) AS total_order FROM customers C
	LEFT JOIN order_items OI
	ON C.customer_id = OI.order_id
	LEFT JOIN products P
	ON OI.product_id = P.product_id
	WHERE first_name = @first_name AND last_name =	@last_name
	GROUP BY  c.first_name,c.last_name
	ORDER BY total_order DESC
	END

	EXEC find_order2 'Debra','Burks'


/*Task 6: Functions

User-defined Functions:
Calculate the total discount given in an order.
Convert product prices from one currency to another.*/


--Calculate the total discount given in an order.

	
	SELECT p.product_name, SUM(OI.list_price*quantity) AS price,discount,
	SUM(quantity*oi.list_price*(discount/100))  AS final_discount 
	FROM order_items oi
	LEFT JOIN products p
	ON oi.product_id = p.product_id
	GROUP BY OI.list_price,discount,p.product_name,OI.list_price
	ORDER BY price DESC

	
	
	

--Convert product prices from one currency to another.

	SELECT * FROM products
	
	SELECT 
    product_name, 
    ROUND(list_price,2) AS Euro,
    FORMAT(ROUND(list_price * 1.07, 2), 'N2') AS Dollar,
    FORMAT(ROUND(list_price * 0.85, 2), 'N2') AS Pound_sterling,
    FORMAT(ROUND(list_price * 100.28, 2), 'N2') AS Albania_lek
    FROM  products ;

/*Task 7: Performance Optimization

Indexing:
Create indexes to optimize queries for retrieving products, orders, and customers*/


SELECT * FROM products

		CREATE INDEX InProducts
		ON products(product_name,list_price)

		SELECT * FROM order_items

		CREATE INDEX InOrder
		ON order_items(product_id,list_price,discount)

		SELECT * FROM customers

		CREATE INDEX InCustomers
		ON customers (first_name,last_name,city)

/*Task 8: Advanced Queries

Advanced Data Analysis:
Identify the most popular product in each store.
Calculate the average order value per customer.*/


--Identify the most popular product in each store.
	SELECT * FROM products
	SELECT * FROM stores


	SELECT  TOP 1 store_name, product_name,SUM(quantity) AS quantity 
	FROM order_items oi 
	left join products p
	ON oi.product_id = p.product_id
	LEFT JOIN stores 
	ON item_id = store_id
	WHERE store_name = 'Santa Cruz Bikes'
	GROUP BY store_name , product_name
	ORDER BY QUANTITY DESC



	WITH store1 AS	
	(SELECT  TOP 1 store_name, product_name,SUM(quantity) AS quantity 
	FROM order_items oi 
	left join products p
	ON oi.product_id = p.product_id
	LEFT JOIN stores 
	ON item_id = store_id
	WHERE store_name = 'Santa Cruz Bikes'
	GROUP BY store_name , product_name
	ORDER BY QUANTITY DESC
	),
	store2 AS
	(SELECT  TOP 1 store_name, product_name,SUM(quantity) AS quantity 
	FROM order_items oi 
	left join products p
	ON oi.product_id = p.product_id
	LEFT JOIN stores 
	ON item_id = store_id
	WHERE store_name = 'Baldwin Bikes'
	GROUP BY store_name , product_name
	ORDER BY QUANTITY DESC), 
	store3 AS
	(SELECT  TOP 1 store_name, product_name,SUM(quantity) AS quantity 
	FROM order_items oi 
	left join products p
	ON oi.product_id = p.product_id
	LEFT JOIN stores 
	ON item_id = store_id
	WHERE store_name = 'Rowlett Bikes'
	GROUP BY store_name , product_name
	ORDER BY QUANTITY DESC
	)
	SELECT * FROM store1  
	UNION	
	SELECT * FROM store2
	UNION  
	SELECT * FROM  store3
	ORDER BY quantity DESC


--Calculate the average order value per customer.

	SELECT * FROM order_items
	SELECT * FROM customers

  SELECT 
	CONCAT(first_name ,'  ' , last_name) AS customer_Name,ROUND(AVG(list_price*quantity),2) AS average_customer 
  FROM 
	order_items oi
	LEFT JOIN customers c ON oi.product_id = c.customer_id
  GROUP BY 
	first_name , last_name
  ORDER BY 
    average_customer DESC



/*
Task 9: Data Validation

Implement Constraints:
Ensure that product prices are positive.
Ensure that quantities in stocks are non-negative.*/


--Ensure that product prices are positive.
	SELECT * FROM order_items

	ALTER TABLE order_items
	ADD CHECK (list_price > 0)

	ALTER TABLE order_items
	ADD CHECK (quantity > 0)
 
	SELECT * FROM products

	ALTER TABLE products 
	ADD CHECK (list_price > 0)

 --Ensure that quantities in stocks are non-negative

	SELECT * FROM stocks

	ALTER TABLE stocks 
	ADD CHECK (quantity >= 0)

/*
Task 10: Backup and Recovery

Database Backup:
Create a script to back up the database.
*/  

-- manual right click 
	--Tasks 
	 --Back up
		-- Add OK


/*
Task 11: Views
Create Views:
Create a view that shows the details of active staff members along with their store information.
*/

	CREATE VIEW staff_stores
	AS
	SELECT sto.store_id,
	CONCAT (sta.first_name ,'  ' , sta.last_name) AS name  , sta.email AS staff_email,sta.phone AS staff_phone,
	store_name , sto.phone AS store_phone, sto.email AS email_store,city
	FROM staffs sta 
	LEFT JOIN stores sto
	ON sta.store_id = sto.store_id
	
	SELECT * FROM staff_stores

/*Task 12: Triggers

Create Triggers:
Create a trigger to automatically update stock quantity when an order is placed.
*/


SELECT * FROM order_items
SELECT * FROM stocks

CREATE TRIGGER UpStock
ON order_items 
AFTER UPDATE 
AS
BEGIN 
SET NOCOUNT ON;
UPDATE s
SET s.quantity = s.quantity  + (i.quantity - d.quantity)
FROM stocks s
INNER JOIN inserted i on s.product_id = i.product_id
INNER JOIN deleted d on d.product_id = i.product_id
WHERE I.quantity <> d.quantity
END 


SELECT * FROM order_items
WHERE product_id = 2
SELECT * FROM stocks

UPDATE order_items 
SET quantity = quantity - 1
WHERE product_id = 2
AND item_id = 1
AND order_id = 4